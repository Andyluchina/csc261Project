{"version":3,"sources":["App.js","Login.js","MainPage.js","serviceWorker.js","index.js","logo.svg"],"names":["Component","Login","state","workid","onChange","event","_this","setState","target","value","onClick","console","log","styles","grid","justifyContent","width","margin","textAlign","marginTop","container","backgroundColor","height","react_default","a","createElement","Grid_default","style","this","Typography_default","component","variant","gutterBottom","TextField_default","required","id","label","defaultValue","Button_default","MainPage","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"8PAIkBA,+FCiEHC,6MA/DbC,MAAQ,CACNC,OAAQ,MAGVC,SAAW,SAAAC,GACTC,EAAKC,SAAS,CACZJ,OAAQE,EAAMG,OAAOC,WAIzBC,QAAU,SAAAL,GACRM,QAAQC,IAAIN,EAAKJ,MAAMC,WAIzBU,OAAS,CACPC,KAAM,CACJC,eAAgB,SAChBC,MAAO,MACPC,OAAQ,OACRC,UAAW,SACXC,UAAW,SAEbC,UAAW,CACTC,gBAAiB,YACjBC,OAAQ,kFAKV,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,MAAOC,KAAKf,OAAOO,UAAWA,WAAS,GAC3CG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,MAAOC,KAAKf,OAAOC,MACvBS,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYM,UAAU,KAAKC,QAAQ,KAAKC,cAAY,GAApD,qDAGAT,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYO,QAAQ,KAAKC,cAAY,GAArC,kCAGAT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,UAAQ,EACRC,GAAG,oBACHC,MAAM,WACNC,aAAcT,KAAK1B,MAAMC,OACzBc,OAAO,SACPc,QAAQ,WACR3B,SAAUwB,KAAKxB,WAEjBmB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQO,QAAQ,YAAYD,UAAU,OAAOpB,QAASkB,KAAKlB,SAA3D,SAGAa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYG,MAAO,CAAER,UAAW,QAAUa,cAAY,GAAtD,mGAtDUhC,aCGLuC,mLAJX,OAAOhB,EAAAC,EAAAC,cAAA,0CAFYzB,aCUHwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACPvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACpB,UAAW7B,IACjCsB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAK,EAACpB,UAAWS,OAI/CY,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.aafa831c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nclass Login extends Component {\r\n  state = {\r\n    workid: \"\"\r\n  };\r\n\r\n  onChange = event => {\r\n    this.setState({\r\n      workid: event.target.value\r\n    });\r\n  };\r\n\r\n  onClick = event => {\r\n    console.log(this.state.workid);\r\n    //posting the things to the backend\r\n  };\r\n\r\n  styles = {\r\n    grid: {\r\n      justifyContent: \"center\",\r\n      width: \"75%\",\r\n      margin: \"auto\",\r\n      textAlign: \"center\",\r\n      marginTop: \"200px\"\r\n    },\r\n    container: {\r\n      backgroundColor: \"lightblue\",\r\n      height: \"100vh\"\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Grid style={this.styles.container} container>\r\n        <Grid style={this.styles.grid}>\r\n          <Typography component=\"h2\" variant=\"h3\" gutterBottom>\r\n            The National Aeronautics and Space Administration\r\n          </Typography>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Please Login below with workid\r\n          </Typography>\r\n          <TextField\r\n            required\r\n            id=\"outlined-required\"\r\n            label=\"Required\"\r\n            defaultValue={this.state.workid}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            onChange={this.onChange}\r\n          />\r\n          <br />\r\n          <Button variant=\"contained\" component=\"span\" onClick={this.onClick}>\r\n            Login\r\n          </Button>\r\n          <br />\r\n          <Typography style={{ marginTop: \"30px\" }} gutterBottom>\r\n            This site is a highly classified site, any attempt to temper with\r\n            this site is illegal\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\n\r\nclass MainPage extends Component {\r\n  render() {\r\n    return <div>this is the MainPage</div>;\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport { Switch } from \"react-router\";\nimport Login from \"./Login\";\nimport MainPage from \"./MainPage\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <div>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Login} />\n        <Route path=\"/MainPage\" exact component={MainPage} />\n      </Switch>\n    </BrowserRouter>\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}