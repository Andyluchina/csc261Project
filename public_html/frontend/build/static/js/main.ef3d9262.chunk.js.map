{"version":3,"sources":["MainPage.js","Login.js","serviceWorker.js","index.js"],"names":["styles","root","flexGrow","grow","Button","marginLeft","MainPage","onClick","_this","props","clearUser","Logout","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","this","workid","Button_default","style","React","Component","Login","state","page","onChange","event","setState","target","value","console","log","grid","justifyContent","width","margin","textAlign","marginTop","container","backgroundColor","height","renderLogin","Grid_default","component","gutterBottom","TextField_default","required","id","label","defaultValue","renderMain","src_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_Login","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAMMA,EAAS,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,GAEZE,OAAQ,CACNC,WAAY,SAgCDC,6MA3BbC,QAAU,WACRC,EAAKC,MAAMC,YACXF,EAAKC,MAAME,kFAIX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWf,EAAOC,MACrBW,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,MAAM,UAAUN,UAAWf,EAAOG,MACxDmB,KAAKb,MAAMc,QAEdX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEQ,MAAM,UACNI,MAAOzB,EAAOI,OACdG,QAASe,KAAKf,SAHhB,oBAdWmB,IAAMC,WCqFdC,6MAhGbC,MAAQ,CACNN,OAAQ,GACRO,KAAM,WAGRC,SAAW,SAAAC,GACTxB,EAAKyB,SAAS,CACZV,OAAQS,EAAME,OAAOC,WAIzB5B,QAAU,SAAAyB,GACRI,QAAQC,IAAI7B,EAAKqB,MAAMN,QAEvBf,EAAKyB,SAAS,CACZH,KAAM,YAIV9B,OAAS,CACPsC,KAAM,CACJC,eAAgB,SAChBC,MAAO,MACPC,OAAQ,OACRC,UAAW,SACXC,UAAW,SAEbC,UAAW,CACTC,gBAAiB,YACjBC,OAAQ,YAIZnC,OAAS,WACPH,EAAKyB,SAAS,CACZH,KAAM,aAGViB,YAAc,WACZ,OACEnC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAMY,MAAOjB,EAAKR,OAAO4C,UAAWA,WAAS,GAC3ChC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAMY,MAAOjB,EAAKR,OAAOsC,MACvB1B,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYoC,UAAU,KAAK7B,QAAQ,KAAK8B,cAAY,GAApD,qDAGAtC,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAK8B,cAAY,GAArC,kCAGAtC,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CACEuC,UAAQ,EACRC,GAAG,oBACHC,MAAM,WACNC,aAAc/C,EAAKqB,MAAMN,OACzBkB,OAAO,SACPrB,QAAQ,WACRW,SAAUvB,EAAKuB,WAEjBnB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAQO,QAAQ,YAAY6B,UAAU,OAAO1C,QAASC,EAAKD,SAA3D,SAGAK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYY,MAAO,CAAEkB,UAAW,QAAUO,cAAY,GAAtD,+FASRxC,UAAY,WACVF,EAAKyB,SAAS,CACZV,OAAQ,QAIZiC,WAAa,WACX,OACE5C,EAAAC,EAAAC,cAAC2C,EAAD,CACE9C,OAAQH,EAAKG,OACbY,OAAQf,EAAKqB,MAAMN,OACnBb,UAAWF,EAAKE,qFAMpB,MAAwB,UAApBY,KAAKO,MAAMC,KACNR,KAAKyB,cACiB,SAApBzB,KAAKO,MAAMC,KACbR,KAAKkC,kBADP,SA3FS7B,aCMA+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmD,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ef3d9262.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  grow: {\r\n    flexGrow: 1\r\n  },\r\n  Button: {\r\n    marginLeft: \"20px\"\r\n  }\r\n};\r\n\r\nclass MainPage extends React.Component {\r\n  onClick = () => {\r\n    this.props.clearUser();\r\n    this.props.Logout();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" color=\"inherit\" className={styles.grow}>\r\n              {this.props.workid}\r\n            </Typography>\r\n            <Button\r\n              color=\"inherit\"\r\n              style={styles.Button}\r\n              onClick={this.onClick}\r\n            >\r\n              Logout\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MainPage from \"./MainPage\";\r\nclass Login extends Component {\r\n  state = {\r\n    workid: \"\",\r\n    page: \"login\"\r\n  };\r\n\r\n  onChange = event => {\r\n    this.setState({\r\n      workid: event.target.value\r\n    });\r\n  };\r\n\r\n  onClick = event => {\r\n    console.log(this.state.workid);\r\n    //posting the things to the backend\r\n    this.setState({\r\n      page: \"main\"\r\n    });\r\n  };\r\n\r\n  styles = {\r\n    grid: {\r\n      justifyContent: \"center\",\r\n      width: \"75%\",\r\n      margin: \"auto\",\r\n      textAlign: \"center\",\r\n      marginTop: \"200px\"\r\n    },\r\n    container: {\r\n      backgroundColor: \"lightblue\",\r\n      height: \"100vh\"\r\n    }\r\n  };\r\n\r\n  Logout = () => {\r\n    this.setState({\r\n      page: \"login\"\r\n    });\r\n  };\r\n  renderLogin = () => {\r\n    return (\r\n      <Grid style={this.styles.container} container>\r\n        <Grid style={this.styles.grid}>\r\n          <Typography component=\"h2\" variant=\"h3\" gutterBottom>\r\n            The National Aeronautics and Space Administration\r\n          </Typography>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Please Login below with workid\r\n          </Typography>\r\n          <TextField\r\n            required\r\n            id=\"outlined-required\"\r\n            label=\"Required\"\r\n            defaultValue={this.state.workid}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            onChange={this.onChange}\r\n          />\r\n          <br />\r\n          <Button variant=\"contained\" component=\"span\" onClick={this.onClick}>\r\n            Login\r\n          </Button>\r\n          <br />\r\n          <Typography style={{ marginTop: \"30px\" }} gutterBottom>\r\n            This site is a highly classified site, any attempt to temper with\r\n            this site is illegal\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  clearUser = () => {\r\n    this.setState({\r\n      workid: \"\"\r\n    });\r\n  };\r\n\r\n  renderMain = () => {\r\n    return (\r\n      <MainPage\r\n        Logout={this.Logout}\r\n        workid={this.state.workid}\r\n        clearUser={this.clearUser}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (this.state.page === \"login\") {\r\n      return this.renderLogin();\r\n    } else if (this.state.page === \"main\") {\r\n      return this.renderMain();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { BrowserRouter, Route, Link } from \"react-router-dom\";\n// import { Switch } from \"react-router\";\nimport Login from \"./Login\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <div>\n    <Login />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}